                             ┌────────────────────┐
                             │   exec_ast(node)   │
                             └────────────┬───────┘
                                          │
                             ┌────────────▼───────┐
                             │   node == NULL ?   │
                             └───────┬───────┬────┘
                                     │Yes    │No
                                     ▼       ▼
                               return 0   ┌────────────────────┐
                                          │ switch(node->type) │
                                          └────────────────────┘
                                                   │
        ┌──────────────────────────────────────────┼────────────────────────────────────────────┐
        ▼                                          ▼                                            ▼
[NODE_COMMAND]                            [NODE_PIPE]                                 [NODE_AND / NODE_OR]
        │                                          │                                            │
        ▼                                          ▼                                            ▼
is_builtin(node->command->argv[0]) ?      create pipe()                                 exec_ast(node->left)
        │                                          │                                            │
    ┌───┴────┐                              ┌──────┴───────┐                            ┌────────┴────────┐
    │  Yes   │                              │  fork left   │                            │   Get status    │
    ▼        ▼                              └──────────────┘                            │  of left child  │
apply_redirs()  fork()                             │                                    └────────┬────────┘
    │        ┌───── child ─────┐                 wait                                  ┌────────▼──────────┐
    │        │  exec_builtin() │                   │                                   │ if AND: status==0 │
    │        └─────────────────┘             ┌─────┴─────┐                             │ if OR: status!=0  │
    │        ┌───── parent ────┐             │ fork right│                             └──────┬────────────┘
    │        │  wait + restore │             └───────────┘                                    ▼
    │        └─────────────────┘                   │                                    exec_ast(node->right)
    ▼                                              ▼
exec_external() → execve()                  wait both children
    │                                              │
    ▼                                              ▼
 return status                              return last status

        ┌────────────────────────────────────────────────────────────────────────────┐
        ▼                                                                            ▼
[NODE_SUBSHELL]                                                              [DEFAULT / ERROR]
        │                                                                            │
        ▼                                                                            ▼
    fork()                                                                  print error & exit
        │
 ┌──────┴─────┐
 │  child     │
 │  exec_ast(node->left) ───> recursive walk into subshell
 │  exit()    │
 └──────┬─────┘
        │
        ▼
     waitpid
	    │
        ▼
   return status



   Да, ты понял абсолютно верно. Продолжаю пошагово в том же стиле:

---

## ✅ Обработчик: `NODE_COMMAND`

1. **Это лист дерева** — содержит `t_command *` (argv + redirs).
2. Проверяем: является ли команда `builtin`?

   * **Если да**:

     * Применяем редиректы: `apply_redirections(node->command->redirections)`
     * Выполняем `builtin` напрямую (без fork).
     * Восстанавливаем стандартные `stdin/stdout` (если было переназначено).
     * Сохраняем `exit_status`.
   * **Если нет**:

     * Создаём `fork()`

       * В **дочернем**:

         * Применяем редиректы.
         * Вызываем `execve()` с `argv` и `envp`.
       * В **родителе**:

         * Ждём завершения дочернего процесса.
         * Читаем `exit_status`.

---

## ✅ Обработчик: `NODE_PIPE`

1. Создаём `pipe()`.
2. Форкаем **левый процесс**:

   * Перенаправляем `stdout` в `pipe[1]`.
   * Закрываем `pipe[0]` (не читаем).
   * Вызываем `exec_ast(node->left)`.
3. Форкаем **правый процесс**:

   * Перенаправляем `stdin` в `pipe[0]`.
   * Закрываем `pipe[1]` (не пишем).
   * Вызываем `exec_ast(node->right)`.
4. В родителе:

   * Закрываем оба конца pipe.
   * Ждём оба дочерних процесса.
   * Сохраняем статус последнего.

---

## ✅ Обработчик: `NODE_AND` (логическое `&&`)

1. Выполняем `exec_ast(node->left)`.
2. Если `exit_status == 0`, выполняем `exec_ast(node->right)`.
3. Иначе — пропускаем правую ветку.
4. Сохраняем `exit_status` последней выполненной команды.

---

## ✅ Обработчик: `NODE_OR` (логическое `||`)

1. Выполняем `exec_ast(node->left)`.
2. Если `exit_status != 0`, выполняем `exec_ast(node->right)`.
3. Иначе — пропускаем правую ветку.
4. Сохраняем `exit_status` последней выполненной команды.

---

## ✅ Обработчик: `NODE_SUBSHELL` (вложенные скобки)

1. Делаем `fork()`.
2. В **дочернем**:

   * Выполняем `exec_ast(node->left)` (вложенное выражение).
   * Вызываем `exit(exit_status)` — не влияет на родительскую оболочку.
3. В **родителе**:

   * Ждём завершения дочернего процесса.
   * Сохраняем `exit_status`.

---

## ✅ Что делает `exec_ast()` в итоге:

* Рекурсивно проходит по дереву.
* Выполняет все ветви в соответствии с их логикой.
* Корректно обрабатывает редиректы, пайпы, логические операторы и скобки.
* Обновляет глобальный `g_exit_status`.

---

Если всё ясно, можем переходить к созданию `executor.h` и базового скелета `executor.c`.

#########################################################
################## COMMON INSTRUCTIONS ##################
#########################################################

| Требование                               | Нарушаем? | Комментарий                                                    |
| ---------------------------------------- | --------- | -------------------------------------------------------------- |
| Проект написан на C                      | ❌        | Всё на C ✅                                                     |
| Соблюдение Norm                          | ❌         | Мы следуем Norm (имена, отступы, длина функций и т.д.) ✅       |
| Без сбоев (segfault, double free)        | ❌         | Мы учитываем ошибки, выделяем и освобождаем память корректно ✅ |
| Нет утечек памяти                        | ❌         | У нас будет `clean_token_list`, `free_ast`, и т.д. ✅           |
| Makefile с нужными правилами             | ⏳         | Реализуем позже (NAME, all, clean, fclean, re, bonus)          |
| Разделение bonus-модуля и основной части | ⏳         | Учитываем это при планировании (`_bonus.c/.h`)                 |
| Подключение `libft` через Makefile       | ❌         | У нас `libft` в папке `libft/`, подключаем правильно ✅         |
| Создание тестов                          | ❌         | Не требуется по сабжекту, но мы уже ведём тестирование ✅       |
| Отправка только в Git                    | ❌         | Требует только соблюдения Git-репозитория ✅                    |

🔍 Итог по первому блоку:
Мы полностью соответствуем требованиям.
👉 Нарушений нет, только ещё не сделаны: Makefile и разделение бонуса (это планируется).


#########################################################
##################### MANDATORY PART ####################
#########################################################

Отлично. Это второй блок — **технические требования к функциональности**, включая список разрешённых функций и поведение shell. Проверим строго и построчно:

---

## ✅ 1. **Проверка разрешённых функций**

| Факт                                               | Статус | Комментарий                                |
| -------------------------------------------------- | ------ | ------------------------------------------ |
| Мы используем только разрешённые функции из списка | ✅      | Никаких `strdup`, `system`, `popen` и т.п. |
| Макросы типа `WIFEXITED` и `WEXITSTATUS`           | ✅      | Это макросы, не функции — разрешены        |

---

## ✅ 2. **Глобальные переменные**

| Переменная                                                    | Назначение         | Статус               |
| ------------------------------------------------------------- | ------------------ | -------------------- |
| `g_exit_status`                                               | хранит `$?`        | ✅ OK                 |
| `g_sigint`                                                    | хранит факт SIGINT | ✅ OK                 |
| Используем **только одну глобальную переменную для сигналов** | ✅                  | Требование соблюдено |

---

## ✅ 3. **Функциональность shell**

| Требование                             | Статус | Комментарий                                                               |                                         |
| -------------------------------------- | ------ | ------------------------------------------------------------------------- | --------------------------------------- |
| Отображать prompt                      | ✅      | readline уже в использовании                                              |                                         |
| История команд                         | ✅      | с readline, `add_history()`                                               |                                         |
| Исполнять команды из PATH              | 🟡     | будет реализовано в `exec_external()` через `getenv("PATH")` + `access()` |                                         |
| Раскрытие `$VAR`, `$?`                 | ✅      | делается в `expander()`                                                   |                                         |
| Обработка `ctrl-C`, `ctrl-D`, `ctrl-\` | ✅      | реализовано через `signals.c`                                             |                                         |
| Обработка кавычек `'` и `"`            | ✅      | реализовано в `lexer`                                                     |                                         |
| Не интерпретировать `\` и `;`          | ✅      | `lexer` не обрабатывает эти символы                                       |                                         |
| Редиректы `<`, `>`, `>>`, `<<`         | 🟡     | в процессе (`apply_redirections()` на подходе)                            |                                         |
| Пайпы \`                               | \`     | 🟡                                                                        | структура заложена, будет `exec_pipe()` |
| Поддержка builtins                     | 🟡     | `exec_builtin()` и `is_builtin()` уже предусмотрены                       |                                         |

---

## ✅ 4. **Builtins**

| Команда   | Статус      |
| --------- | ----------- |
| `echo -n` | ✅ реализуем |
| `cd`      | 🟡          |
| `pwd`     | 🟡          |
| `export`  | 🟡          |
| `unset`   | 🟡          |
| `env`     | 🟡          |
| `exit`    | 🟡          |

🔹 Всё будет реализовано поэтапно через `builtin.c`.

---

## ❗ Особое указание

> The readline() function can cause memory leaks. You don’t have to fix them.
> But that **doesn’t mean your own code** can have memory leaks.

📌 Мы обязаны:

* проверять `malloc` и освобождать всё, что мы сами выделили.
* **не допускать утечек**, кроме как в `readline()`.

---

## 🟢 Вывод:

| Группа требований          | Соблюдается?  |
| -------------------------- | ------------- |
| Разрешённые функции        | ✅             |
| Поведение сигналов         | ✅             |
| Переменные `$VAR`, `$?`    | ✅             |
| Обработка `Ctrl+C/D/\`     | ✅             |
| Кавычки, спецсимволы       | ✅             |
| История + prompt           | ✅             |
| Редиректы, пайпы, builtins | 🟡 в процессе |
| Утечек в коде нет          | ✅             |

---


#########################################################
###################### BONUS PART #######################
#########################################################

Отлично. Это третий и финальный блок — **bonus part**. Проверим строго по пунктам:

---

## 🎯 Требования бонусной части:

| Требование                    | Что означает                             |    |                                  |
| ----------------------------- | ---------------------------------------- | -- | -------------------------------- |
| `&&` и \`                     |                                          | \` | логические операторы "и" и "или" |
| Скобки `()`                   | приоритет выражений, как в bash          |    |                                  |
| `*` (wildcards)               | работает как в bash — подстановка файлов |    |                                  |
| Только **текущая директория** | `*` не рекурсивный                       |    |                                  |

---

## ✅ Наш текущий статус:

| Компонент     | Статус | Комментарий                                                                   |   |                                                                                                        |
| ------------- | ------ | ----------------------------------------------------------------------------- | - | ------------------------------------------------------------------------------------------------------ |
| `&&`, \`      |        | \`                                                                            | ✅ | `lexer` распознаёт → `parser` создаёт `NODE_AND/OR` → `executor` маршрутизирует в `exec_and/exec_or()` |
| `()` (скобки) | ✅      | распознаются → создаётся `NODE_SUBSHELL` → в `exec_subshell()` будет `fork()` |   |                                                                                                        |
| `wildcards *` | ❌      | пока не реализовано                                                           |   |                                                                                                        |

---

## 📌 Что осталось реализовать:

### 🔹 Модуль для `wildcards`:

* Раскрывать `*` в списке аргументов команды.
* Делать это **только в текущей директории**.
* Использовать: `opendir()`, `readdir()`, `closedir()` (разрешены в сабжекте).
* Учитывать `quote_map` из токена — `*` в кавычках не раскрывается.

---

## 🟢 Вывод:

| Требование      | Соблюдено           |    |   |
| --------------- | ------------------- | -- | - |
| `&&`, \`        |                     | \` | ✅ |
| `()`            | ✅                   |    |   |
| `*` (wildcards) | ❌ нужно реализовать |    |   |

---



в этом чате мы будем работать над проектом minishell 42.
План работы:
1. пришлю тебе актуальный сабжект из 4ых частей.
2. пришлю тебе хэдер файлы модулей: token, lexer, expander, parser
3. Начнем вместе реализовывать модуль exec.


Common Instructions
• Your project must be written in C.
• Your project must be written in accordance with the Norm. If you have bonus
files/functions, they are included in the norm check and you will receive a 0 if there
is a norm error inside.
• Your functions should not quit unexpectedly (segmentation fault, bus error, double
free, etc) apart from undefined behaviors. If this happens, your project will be
considered non functional and will receive a 0 during the evaluation.
• All heap allocated memory space must be properly freed when necessary. No leaks
will be tolerated.
• If the subject requires it, you must submit a Makefile which will compile your
source files to the required output with the flags -Wall, -Wextra and -Werror, use
cc, and your Makefile must not relink.
• Your Makefile must at least contain the rules $(NAME), all, clean, fclean and
re.
• To turn in bonuses to your project, you must include a rule bonus to your Makefile,
which will add all the various headers, librairies or functions that are forbidden on
the main part of the project. Bonuses must be in a different file _bonus.{c/h} if
the subject does not specify anything else. Mandatory and bonus part evaluation
is done separately.
• If your project allows you to use your libft, you must copy its sources and its
associated Makefile in a libft folder with its associated Makefile. Your project’s
Makefile must compile the library by using its Makefile, then compile the project.
• We encourage you to create test programs for your project even though this work
won’t have to be submitted and won’t be graded. It will give you a chance
to easily test your work and your peers’ work. You will find those tests especially
useful during your defence. Indeed, during defence, you are free to use your tests
and/or the tests of the peer you are evaluating.
• Submit your work to your assigned git repository. Only the work in the git repository will be graded. If Deepthought is assigned to grade your work, it will be done after your peer-evaluations. If an error happens in any section of your work during
Deepthought’s grading, the evaluation will stop.

External functs.
readline, rl_clear_history, rl_on_new_line,
rl_replace_line, rl_redisplay, add_history,
printf, malloc, free, write, access, open, read,
close, fork, wait, waitpid, wait3, wait4, signal,
sigaction, sigemptyset, sigaddset, kill, exit,
getcwd, chdir, stat, lstat, fstat, unlink, execve,
dup, dup2, pipe, opendir, readdir, closedir,
strerror, perror, isatty, ttyname, ttyslot, ioctl,
getenv, tcsetattr, tcgetattr, tgetent, tgetflag,
tgetnum, tgetstr, tgoto, tputs

Mandatory part
Your shell should:
• Display a prompt when waiting for a new command.
• Have a working history.
• Search and launch the right executable (based on the PATH variable or using a
relative or an absolute path).
• Avoid using more than one global variable to indicate a received signal. Consider
the implications: this approach ensures that your signal handler will not access your
main data structures.
Be careful. This global variable cannot provide any other
information or data access than the number of a received signal.
Therefore, using "norm" type structures in the global scope is
forbidden. 
• Not interpret unclosed quotes or special characters which are not required by the
subject such as \ (backslash) or ; (semicolon).
• Handle ’ (single quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence.
• Handle " (double quote) which should prevent the shell from interpreting the metacharacters in the quoted sequence except for $ (dollar sign).
• Implement redirections:
◦ < should redirect input.
◦ > should redirect output.
◦ << should be given a delimiter, then read the input until a line containing the
delimiter is seen. However, it doesn’t have to update the history!
◦ >> should redirect output in append mode.
• Implement pipes (| character). The output of each command in the pipeline is
connected to the input of the next command via a pipe.
• Handle environment variables ($ followed by a sequence of characters) which
should expand to their values.
• Handle $? which should expand to the exit status of the most recently executed
foreground pipeline.
• Handle ctrl-C, ctrl-D and ctrl-\ which should behave like in bash.
• In interactive mode:
◦ ctrl-C displays a new prompt on a new line.
◦ ctrl-D exits the shell.
◦ ctrl-\ does nothing.
• Your shell must implement the following builtins:
◦ echo with option -n
◦ cd with only a relative or absolute path
◦ pwd with no options
◦ export with no options
◦ unset with no options
◦ env with no options or arguments
◦ exit with no options


Bonus part
Your program has to implement:
• && and || with parenthesis for priorities.
• Wildcards * should work for the current working directory.



всего 9 модулей.
Каждый модуль это отдельная папка с мейкфайлом, который собирает объект файлы текущего модуля и при наличии объект файлы модулей, от которых текущий модуль зависит.
Все 9 модулей лежат в папке srcs/.
На одном уровне с srcs/ лежат:
- папка libft - папка моей библиотеки, которая разрешена сабжектом
- папка incls - с хэдер файлами
- Makefile
- Makefile.inc

Независимые модули (могут зависеть только от libft):
- ast - отвечает за сущность ast и работу с ним
- env - отвечает за работу с окружением
- token - отвечает за сущность токен и работу с ним
- signals - отвечает за работу с сигналами

Зависимые модули (зависят от одного или более других модулей)
- lexer - зависит от токен, получает инпут и строит токен лист
- экспандер - зависит от лексер и энв, получает список токенов, обновляет его, раскрыв доллар, возвращает список токенов
- парсер - зависит от аст и экспандера, получает токен лист и строит аст дерево
- exec - зависит от парсера и сигналов, получает аст дерево и рекурсивно исполняет каждую ноду
- main - центральный модуль, зависит от exec, запускает основной цикл





теперь когда у тебя есть понимание архитектуры, предлагаю тебе взять в руки управление.
Веди себя как строгий и требовательный ментор.
Твоя цель проверить проект, выявить слабости, несоответствие сабжекту, ошибки, утечки и помочь их исправить, чтобы проект был полностью готов к защите.

Твой план работы:
1. ознакомиться в достаточной степени с кодом: только хэдер файлы? только основные функции? или вообще все? решаешь ТЫ!.
2. фиксировать свои замечания в единый чеклист. Мы не побежим сразу все фиксить. Сначала соберем все замечания и подозрения в едином месте.
3. Ты предложишь мне собрать проект и начать тестировать его, опираясь на список, полученный в п.2. Ты будешь вести диалог. Ты будешь говорить, что делать, что проверить, что отправить тебе, чтобы ты посмотрел, проверил.
4. Всегда будь корректен, краток, требователен. Инициатива на твоей стороне. Твой единственный референс - это сабжект из 4ых частей, который я тебе уже отправил.