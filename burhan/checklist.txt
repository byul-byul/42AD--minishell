MANDATORY
Compile
- [✅] Use "make -n" to see if compilation use "-Wall -Wextra -Werror". If not, select the "invalid compilation" flag.
- [✅] minishell compiles without any errors. If not, select the flag.
- [✅] The Makefile must not re-link. If not, select the flag.

Simple Command & global variables
- [✅] Execute a simple command with an absolute path like /bin/ls, or any other command without any options.
    1. Command: /bin/ls
        Expected: Lists current directory contents.
    2. Command: /bin/pwd
        Expected: Prints current working directory.
    3. Command: /bin/echo hello
        Expected: hello
- [✅] How many global variables are used? Why? Ask the evaluated student to give you a concrete example of why it feels mandatory or logical.
    1.✅ Action: Run minishell, press Ctrl+C
        Expected: Shell doesn't exit. Global variable (e.g., g_exit_status) updated with SIGINT code.
    2.✅ Action: Run a blocking command (e.g., cat) and send Ctrl+\
        Expected: Shell handles SIGQUIT. Global var reflects it if used.
    3.✅ Action: Check if variable affects exit status after signal
       Command: ./minishell → press Ctrl+C → type echo $?
        Expected: Returns 130 (signal exit code for SIGINT)
- [❌] Check the global variable. This global variable cannot provide any other information or data access than the number of a received signal.
    1.✅ Inspect: Is the global variable only storing the signal code?
        Expected: Variable (e.g., g_exit_status = 2) only represents SIGINT, not command data or status.
    2.❌ Action: Set global var manually in code to invalid value (e.g., g_exit_status = 999)
        Expected: Shell behaves incorrectly → proves it’s tied only to signal codes.
    3.✅ Action: Trigger SIGINT and observe how the shell reacts (e.g., resets prompt, doesn’t exit)
        Expected: Shell reads g_exit_status = SIGINT (2) only to decide prompt behavior, not for logic branching.
- [✅] Test an empty command.
    1.✅ Input: (Just press Enter)
        Expected: No output or error, just new prompt.
    2.✅ Input: "" (empty string in quotes)
        Expected:  : command not found.
    3.✅ Input: '' (same as above but with single quotes)
        Expected:  : command not found.
- [✅] Test only spaces or tabs.
    1.✅ Input: (5 spaces)
        Expected: No output, prompt returns.
    2.✅ Action: press tab 1 time
        Expected: No output.
    3.✅ Action: press tab 2 or more times
        Expected: ls of current dir.
- [✅] If something crashes, select the "crash" flag.
    1.✅ Input: unset PATH → then try: ls
        Expected: Should fail gracefully (e.g., "command not found"), not crash.
    2.✅ Input: export VERYLONG=$(yes | head -n 100000)
        Expected: Should handle large env vars without crashing.
    3.✅ Action: Pipe invalid memory (e.g., echo test | ./minishell) if supported
        Expected: Should handle input without segmentation fault.
- [✅] If something doesn't work, select the "incomplete work" flag.
    1.✅ Input: ls |
        Expected: Syntax error. If nothing happens or no error shown → incomplete.
    2.✅ Input: cd
        Expected: Should go to $HOME. If not → incomplete.
    3.✅ Input: echo hello >
        Expected: Syntax error. If shell hangs or does nothing → incomplete.

Arguments
- [✅] Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes or double quotes.
    1.✅ Command: /bin/echo hello world
        Expected: hello world
    2.✅ Command: /bin/ls -a -l
        Expected: Detailed list of all files, including hidden ones
    3.✅ Command: /bin/mkdir testdir
        Expected: Creates a new directory named testdir
- [✅] Repeat multiple times with different commands and arguments.
    1.✅ Command: /bin/touch a b c
        Expected: /bin/touch: No such file or directory
    2.✅ Command: /bin/rm a b c
        Expected:   rm: a: No such file or directory
                    rm: b: No such file or directory
                    rm: c: No such file or directory
    3.✅ Command: /bin/echo 1 2 3 4 5
        Expected: 1 2 3 4 5
- [❔] If something crashes, select the "crash" flag.
    1.✅ Command: export TEST
        Expected: Crash — missing = in export should be handled gracefully, but some implementations crash if not validated properly.
    2.✅ Command: unset (with no arguments)
        Expected: Should be handled safely. Some implementations dereference null/invalid pointers → crash if no argument check.
    3.❌ Command: echo $((2 + ))
        Expected: Bash prints: bash: ((: 2 + : syntax error: operand expected
- [❔] If something doesn't work, select the "incomplete work" flag.

echo
- [✅] Execute the echo command with or without arguments, or the -n option.
- [✅] Repeat multiple times with different arguments.
- [❔] If something crashes, select the "crash" flag.
- [❔] If something doesn't work, select the "incomplete work" flag.

exit
- [✅] Execute exit command with or without arguments.
    1. ./minishell -c "exit 42"; echo $? 
    2. exit 42
    should see:
        exit
        42
- [✅] Repeat multiple times with different arguments.
- [❔] Don't forget to relaunch the minishell.
- [❔] If something crashes, select the "crash" flag.
- [❔] If something doesn't work, select the "incomplete work" flag.

Return value of a process
- [✅] Execute a simple command with an absolute path like /bin/ls, or any other command with arguments but without any quotes and double quotes. Then execute echo $?
    1.✅ Command: /bin/ls then echo $?
        Expected: 0
    2.✅ Command: /bin/false then echo $?
        Expected: 127
    3.✅ Command: /bin/ls filethatdoesntexist then echo $?
        Expected: 1
- [✅] Check the printed value. You can do the same in bash in order to compare the results.
- [✅] Repeat multiple times with different commands and arguments. Try some wrong commands like '/bin/ls filethatdoesntexist'
- [✅] Try anything like expr $? + $?
- [❔] If something crashes, select the "crash" flag.
- [❔] If something doesn't work, select the "incomplete work" flag.

Signals
- [✅] ctrl-C in an empty prompt should display a new line with a new prompt.
- [✅] ctrl-\ in an empty prompt should not do anything.
- [✅] ctrl-D in an empty prompt should quit minishell --> RELAUNCH!
- [✅] ctrl-C in a prompt after you wrote some stuff should display a new line with a new prompt.
- [✅] The buffer should be clean too. Press "Enter" to make sure nothing from the previous line is executed.
- [✅] ctrl-D in a prompt after you wrote some stuff should not do anything.
- [✅] ctrl-\ in a prompt after you wrote some stuff should not do anything.
- [❔] Try ctrl-C after running a blocking command like cat without arguments or grep “something“.
- [✅] Try ctrl-\ after running a blocking command like cat without arguments or grep “something“.
- [✅] Try ctrl-D after running a blocking command like cat without arguments or grep “something“.
- [❔] Repeat multiple times using different commands.
- [❔] If something crashes, select the "crash" flag.
- [❔] If something doesn't work, select the "incomplete work" flag.

Double Quotes
- [✅] Execute a simple command with arguments and, this time, use also double quotes (you should try to include whitespaces too).
    1.✅ Command: echo "hello world"
        Expected: hello world
    2.✅ Command: /bin/echo "arg with   multiple   spaces"
        Expected: arg with   multiple   spaces
    3.✅ Command: echo "a b c" "d e f"
        Expected: a b c d e f
- [✅] Try a command like : echo "cat lol.c | cat > lol.c"
- [✅] Try anything except $.
- [❔] If something crashes, select the "crash" flag.
- [❔] If something doesn't work, select the "incomplete work" flag.

Single Quotes
- [✅] Execute commands with single quotes as arguments.
- [✅] Try empty arguments.
- [✅] Try environment variables, whitespaces, pipes, redirection in the single quotes.
- [✅] echo '$USER' must print "$USER".
- [❔] Nothing should be interpreted.

env
- [✅] Check if env shows you the current environment variables.

export
- [✅] Export environment variables, create new ones and replace old ones.
- [✅] Check the result with env.

unset
- [✅] Export environment variables, create new ones and replace old ones.
- [✅] Use unset to remove some of them.
- [✅] Check the result with env.

cd
- [✅] Use the command cd to move the working directory and check if you are in the right directory with /bin/ls
- [✅] Repeat multiple times with working and not working cd
- [✅] Also, try '.' and '..' as arguments.

pwd
- [✅] Use the command pwd.
- [✅] Repeat multiple times in different directories.

Relative Path
- [✅] Execute commands but this time use a relative path.
- [✅] Repeat multiple times in different directories with a complex relative path (lots of ..).

Environment path
- [✅] Execute commands but this time without any path (ls, wc, awk and so forth).
- [✅] Unset the $PATH and ensure commands are not working anymore.
- [✅] Set the $PATH to a multiple directory value (directory1:directory2) and ensure that directories are checked in order from left to right.
    1.  mkdir -p $HOME/testdir1 $HOME/testdir2
    2.  echo '#!/bin/sh' > ~/testdir1/ls
        echo 'echo "FAKE LS from testdir1"' >> ~/testdir1/ls
    3.  chmod +x ~/testdir1/ls
    4.  export PATH=$HOME/testdir1:$HOME/testdir2
    5.  ls
    Expected: FAKE LS from testdir1
Redirection
- [❔] Execute commands with redirections < and/or >
- [❔] Repeat multiple times with different commands and arguments and sometimes change > with >>
- [❔] Check if multiple tries of the same redirections fail.
- [❔] Test << redirection (it doesn't have to update the history).

Pipes
- [❔] Execute commands with pipes like 'cat file | grep bla | more'
- [❔] Repeat multiple times with different commands and arguments.
- [❔] Try some wrong commands like 'ls filethatdoesntexist | grep bla | more'
- [❔] Try to mix pipes and redirections.

Go Crazy and history
- [❔] Type a command line, then use ctrl-C and press "Enter". The buffer should be clean and there should be nothing left to execute.
- [❔] Can we navigate through history using Up and Down? Can we retry some command?
- [❔] Execute commands that should not work like 'dsbksdgbksdghsd'. Ensure minishell doesn't crash and prints an error.
- [❔] 'cat | cat | ls' should behave in a "normal way".
- [❔] Try to execute a long command with a ton of arguments.
- [❔] Have fun with that beautiful minishell and enjoy it!

Environment variables
- [❔] Execute echo with some environment variables ($variable) as arguments.
- [❔] Check that $ is interpreted as an environment variable.
- [❔] Check that double quotes interpolate $.
- [❔] Check that USER exists. Otherwise, set it.
- [❔] echo "$USER" should print the value of the USER variable.

BONUS
And, Or
- [❔] Use &&, || and parenthesis with commands and ensure minishell behaves the same way bash does.

Wildcard
- [❔] Use wildcards in arguments in the current working directory.

Surprise! (or not...)
- [❔] Set the USER environment variable.
- [❔] echo "'$USER'" should print the value of the USER variable.
- [❔] echo '"$USER"' should print "$USER".